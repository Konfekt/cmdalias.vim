*alias* *alias.txt*

==============================================================================
ABOUT                                               *alias-about*

- The plugin provides a function to define command-line abbreviations such
  a way that they are expanded only if they are typed as the first word of
  a command (at ":" prompt).  You can pass in the optional flags

    -buffer

  to create buffer local abbreviations, and

    - range

  to create aliases that accept a range preceding the aliased command.

- The :cabbr's created this way, work like the bash aliases, except that
  in this case, the alias is substituted in-place followed by the rules
  mentioned in the |abbreviations|, and no arguments can be defined.

==============================================================================
USAGE                                               *alias-usage*

    :Alias [-range] [-buffer] <lhs> <rhs>

    or

    :call CmdAlias(['-range'], ['-buffer'], '<lhs>', '<rhs>')

    :UnAlias <lhs> ...
    :Aliases [<lhs> ...]

Examples:

    :Alias   -range   dg   <c-r>=&l:diff?"diffget":"dg"<cr>
    :Alias   -buffer  spl  set\ spell<bar>set spelllang=en<cr>
    :Alias            th   tab\ help
    :Alias            man  Man
    :UnAlias          man
    :Aliases

==============================================================================
CONFIGURATION                                        *alias-configuration*

The variable 'g:cmdaliasCmdPrefixes' lists the patterns of all commands by
which an alias command may be preceded and yet expand. It defaults to

  ['\d*verb\(ose\)\?', 'debug', 'sil\(ent\)\?!\?', 'redir\?!\?']


==============================================================================
DRAWBACKs:

- Since the expansion is in-place, Vim command-line history saves the
  <rhs>, not the <lhs>. This means you can't retrieve a command from
  history by partially typing the <lhs>. Instead, type the <rhs> for this purpose.

vim:ft=help:et:ts=2:sw=2:sts=2:norl:noma:nospell
